@{
    Layout = "_LayoutHtml";
}
@inject IHtmlLocalizer<Template.Web.Areas.Example.Orari.IndexViewModel> ModelLocalizer
@model Template.Web.Areas.Example.Orari.IndexViewModel
@{
    ViewData["Title"] = "Orari";
}
<style>
    .card {
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        margin: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .text {
        padding-right: 20px; /* Aggiunto padding per fare spazio alla "x" */
    }

    .close-btn {
        position: absolute;
        align-self: center;
        right: 10px; /* Posizionato a destra */
        cursor: pointer;
    }
</style>

<header style="background-color: #1554a3; color: white">
    <div class="container-fluid mx-3 py-3">
        <div class="row">
            <h1 class="col-9 ms-2 fs-1">@Model.Nave.Nome</h1>
            <h2 class="col-2 text-end fs-1">@Model.Giorno</h2>
        </div>
    </div>
</header>
<div id="pageId" class="container-fluid">
    <div class="row">
        <aside class="col-3 aside-content m-0 p-0">
            <div class="py-3 px-3" style="background-color: #a5bdff">
                <h3>Dipendenti</h3>
            </div>
            <div v-if="model.model.dipendentiLiberi.length > 0">
                <div style="background-color: #f1f5ff" v-for="dipendentiLiberi in model.model.dipendentiLiberi">
                    <h4 class="pt-3 pb-2 ps-3">{{dipendentiLiberi.ruolo}}</h4>
                    <div class="list-group">
                        <div v-for="dipendenteLibero in dipendentiLiberi.dipendenti">
                            <a href="#" class="list-group-item list-group-item-action" aria-current="true"
                               v-on:click="toggleOperator(dipendenteLibero.id)" v-bind:class="{'active' : isOperatorSelected(dipendenteLibero.id)}">{{dipendenteLibero.nome}} {{dipendenteLibero.cognome}}</a>
                        </div>
                    </div>
                </div>
            </div>
            <div v-else>
                <h4 class="pt-3 pb-2 ps-3 fs-5">Nessun dipendente disponibile</h4>
            </div>
        </aside>
        <div class="col-9 main-content">
            <div class="container-fluid p-0">
                <div class="row">
                    <div class="col-11 p-0">
                        <h3 class="mx-4 my-3">Turni</h3>
                        <table class="table mx-3">
                            <thead>
                                <tr>
                                    <th class="text-center" scope="col" style="width: 25%; background-color: #a5bdff" v-for="fasciaOraria in model.model.fasceOrarie">{{fasciaOraria.etichetta}}</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class="text-center" style="width: 25%" v-for="fasciaOraria in model.model.fasceOrarie">
                                        <button type="button" v-bind:disabled="!isOneOperatorSelected()" v-on:click="addOrarioToDipendente(fasciaOraria.orarioInizio)">+</button> <br />
                                    <div class="card" v-for="orario in fasciaOraria.orari">
                                            <div class="text">
                                                <p>{{orario.nome}} {{orario.cognome}}</p>
                                                <p>{{orario.ruolo}}</p>
                                            </div>
                                            <button class="close-btn" name="btn-00"
                                                    v-on:click="removeOrarioDipendente(orario.id)">x</button>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="/js/bundle-vue.js" asp-append-version="true"></script>
    <script src="~/Areas/Example/Orari/Index.js" asp-append-version="true"></script>

    <script type="application/json" id="Seed_JSON">
        @Html.Raw(Model.ToJson())
    </script>
    <script type="text/javascript">
        var indexVueModel = new Example.Orari.indexVueModel(JSON.parse(document.getElementById("Seed_JSON").innerText));

        var vueModel = new Vue({
            el: '#pageId',
            data: function () {
                return {
                    model: indexVueModel,
                    selectedOperatorId : null
                };
            },
            methods: {
                isOperatorSelected : function (id) {
                    return this.selectedOperatorId == id;
                },

                toggleOperator: function (operatorId) {
                    if (this.selectedOperatorId == operatorId) {
                        this.selectedOperatorId = null;
                    }
                    else {
                        this.selectedOperatorId = operatorId;
                    }
                },

                isOneOperatorSelected: function () {
                    return this.selectedOperatorId != null;
                },

                // Gestisci il click sul pulsante +
                addOrarioToDipendente : function (orarioInizio) {
                    return new Promise((resolve, reject) => {
                        // Chiama l'endpoint nel controller ASP.NET utilizzando AJAX
                        $.ajax({
                            url: "/Example/Orari/addOrarioToDipendente",
                            method: "POST",
                            data: {
                                orarioInizio: orarioInizio,
                                id: this.selectedOperatorId,
                                idNave: vueModel.model.model.nave.id,
                                giorno: vueModel.model.model.giorno
                            },
                            success: function (response) {
                                //alert("Orario aggiunto con successo!");
                                resolve(response);
                                this.selectedOperatorId = null;
                                // Ricarica la pagina
                                location.reload();
                            },
                            error: function () {
                                alert("Si è verificato un errore durante l'aggiunta dell'orario.");
                                reject();
                            }
                        });
                    });
                },

                // Gestisci il click sul pulsante x
                removeOrarioDipendente : function (idOrario) {
                    return new Promise((resolve, reject) => {
                        // Chiama l'endpoint nel controller ASP.NET utilizzando AJAX
                        $.ajax({
                            url: "/Example/Orari/removeOrarioDipendente",
                            method: "POST",
                            data: {
                                idOrario: idOrario
                            },
                            success: function (response) {
                                //alert("Orario rimosso con successo!");
                                resolve(response);
                                // Ricarica la pagina
                                location.reload();
                            },
                            error: function () {
                                alert("Si è verificato un errore durante la rimozione dell'orario.");
                                reject();
                            }
                        });
                    });
                }
            }
        });
    </script>

    @*<script>
        this.isOperatorSelected = (operator) => {
            return this.selectedOperatorId == operator.id;
        };

        this.toggleOperator = (operatorId) => {
            if (this.selectedOperatorId == operatorId) {
                this.selectedOperatorId = null;
            }
            else {
                this.selectedOperatorId = operatorId;
            }
        };

        this.isOneOperatorSelected = () => {
            return this.selectedOperatorId != null;
        };

        // Gestisci il click sul pulsante +
        function addOrarioToDipendente(orarioInizio) {
            return new Promise((resolve, reject) => {
                // Chiama l'endpoint nel controller ASP.NET utilizzando AJAX
                $.ajax({
                    url: "/Example/Orari/addOrarioToDipendente",
                    method: "POST",
                    data: {
                        orarioInizio: orarioInizio,
                        id: this.selectedOperatorId,
                        idNave: "model.Nave.Id",
                        giorno: "model.Giorno"
                    },
                    success: function (response) {
                        //alert("Orario aggiunto con successo!");
                        resolve(response);
                        this.selectedOperatorId = null;
                        // Ricarica la pagina
                        location.reload();
                    },
                    error: function () {
                        alert("Si è verificato un errore durante l'aggiunta dell'orario.");
                        reject();
                    }
                });
            });
        }

        // Gestisci il click sul pulsante x
        function removeOrarioDipendente(idOrario) {
            return new Promise((resolve, reject) => {
                // Chiama l'endpoint nel controller ASP.NET utilizzando AJAX
                $.ajax({
                    url: "/Example/Orari/removeOrarioDipendente",
                    method: "POST",
                    data: {
                        idOrario: idOrario
                    },
                    success: function (response) {
                        //alert("Orario rimosso con successo!");
                        resolve(response);
                        // Ricarica la pagina
                        location.reload();
                    },
                    error: function () {
                        alert("Si è verificato un errore durante la rimozione dell'orario.");
                        reject();
                    }
                });
            });
        }
    </script>

      
    Con Vue valorizzare idDipendenteCorrente tramite @click su ogni voce delle liste di dipendenti.
    Poi aggiungere un watcher all'idDipendenteCorrente, se questo è uguale a un id dipendente allora si attiva, altrimenti no
    v-bind:class="{'selected' : isOperatorSelected(operator)" -> attiva o meno se corrisponde l'id'
    this.isOperatorSelected = (operator) => {
        return this.selectedOperatorId == operator.id;
    };

    v-on:click="toggleOperator(operator.id)" -> assegna idDipendenteCorrente
    this.toggleOperator = (operatorId) => {
        if (this.selectedOperatorId == operatorId) {
            this.selectedOperatorId = null;
        }
        else {
            this.selectedOperatorId = operatorId;
        }
    };

    e se idDipendenteCorrente è valorizzato allora i buttons + sono attivi, altrimenti no
    <div class="drop-arrow py-2" v-bind:class="{'drop-arrow-enabled': isOneOperatorSelected()}" v-on:click="addOperator(@row.Id)">
    <i class="fa-classic fa-regular fa-arrow-down-to-bracket"></i>
    </div>

    this.isOneOperatorSelected = () => {
        return this.selectedOperatorId != null;
    };

    In addOperator bisogna anche riportare a null idDipendenteCorrente per deselezionare la voce
     

    <script>
        // Seleziona tutti gli elementi select con la classe form-select
        var selectElements = document.getElementsByClassName("form-select");

        // Ottengo il riferimento ai button con classe "add-orario"
        var addOrarioButtons = document.getElementsByClassName("add-orario");

        // Itera attraverso tutti gli elementi select
        for (var i = 0; i < selectElements.length; i++) {
            var selectElement = selectElements[i];

            // Controlla la dimensione di ogni select all'avvio della pagina
            //checkSelectSize(selectElement);

            // Aggiungi un gestore di eventi per il blur per deselezionare l'opzione al clic fuori dalla lista
            selectElement.addEventListener('blur', function (event) {
                setTimeout(() => {
                    // Verifica se è stata selezionata un'opzione diversa da quella vuota
                    if (this.selectedIndex !== 0) {
                        // Seleziona l'opzione vuota
                        this.selectedIndex = 0;
                        for (var i = 0; i < addOrarioButtons.length; i++) {
                            // Ottengo il riferimento al singolo button
                            var addOrarioButton = addOrarioButtons[i];
                            addOrarioButton.disabled = true;
                        }
                    }
                }, 250); // 250 millisecondi dovrebbe essere sufficiente
            });

            // Listener dell'evento di selezione di un option
            selectElement.addEventListener('change', function (event) {
                // Itera attraverso tutti gli elementi select
                for (var i = 0; i < addOrarioButtons.length; i++) {
                    var idDipendenteSelezionato = event.target.value;

                    // Ottengo il riferimento al singolo button
                    var addOrarioButton = addOrarioButtons[i];

                    // Abilita il pulsante
                    addOrarioButton.disabled = false;

                    // Listener dell'evento di selezione di un option
                    addOrarioButton.addEventListener('click', async function (event) {
                        // Ottieni l'ID del pulsante cliccato
                        var buttonId = event.target.id;

                        try {
                            // Esegui azioni basate sull'ID del pulsante cliccato
                            if (buttonId == "btn-00") {
                                addOrarioToDipendente(00, idDipendenteSelezionato, "@Model.Nave.Id", "@Model.Giorno");
                            } else if (buttonId == "btn-06") {
                                addOrarioToDipendente(06, idDipendenteSelezionato, "@Model.Nave.Id", "@Model.Giorno");
                            } else if (buttonId == "btn-12") {
                                addOrarioToDipendente(12, idDipendenteSelezionato, "@Model.Nave.Id", "@Model.Giorno");
                            } else if (buttonId == "btn-18") {
                                addOrarioToDipendente(18, idDipendenteSelezionato, "@Model.Nave.Id", "@Model.Giorno");
                            }
                        } catch (error) {
                            console.error("Si è verificato un errore durante l'aggiunta dell'orario");
                        }
                    });
                }
            });
        }

        // Gestisci il click sul pulsante +
        function addOrarioToDipendente(orarioInizio, id, idNave, giorno) {
            return new Promise((resolve, reject) => {
                // Chiama l'endpoint nel controller ASP.NET utilizzando AJAX
                $.ajax({
                    url: "/Example/Orari/addOrarioToDipendente",
                    method: "POST",
                    data: {
                        orarioInizio: orarioInizio,
                        id: id,
                        idNave: idNave,
                        giorno: giorno
                    },
                    success: function (response) {
                        //alert("Orario aggiunto con successo!");
                        resolve(response);
                        // Ricarica la pagina
                        location.reload();
                    },
                    error: function () {
                        alert("Si è verificato un errore durante l'aggiunta dell'orario.");
                        reject();
                    }
                });
            });
        }

        // Ottengo il riferimento ai button con classe "close-btn"
        var cancelCardButtons = document.getElementsByClassName("close-btn");

        for (var i = 0; i < cancelCardButtons.length; i++) {
            var cancelCardButton = cancelCardButtons[i];

            cancelCardButton.addEventListener('click', async function (event) {
                // Ottieni l'ID del pulsante cliccato
                var buttonName = event.target.name;
                var idOrario = event.target.id;
                
                try {
                    // Esegui azioni basate sull'ID del pulsante cliccato
                    if (buttonName == "btn-00") {
                        await removeOrarioDipendente(idOrario);
                    } else if (buttonName == "btn-06") {
                        await removeOrarioDipendente(idOrario);
                    } else if (buttonName == "btn-12") {
                        await removeOrarioDipendente(idOrario);
                    } else if (buttonName == "btn-18") {
                        await removeOrarioDipendente(idOrario);
                    }
                } catch (error) {
                    console.error("Errore durante la rimozione dell'orario");
                }
            });
        }
        

        // Gestisci il click sul pulsante x
        function removeOrarioDipendente(idOrario) {
            return new Promise((resolve, reject) => {
                // Chiama l'endpoint nel controller ASP.NET utilizzando AJAX
                $.ajax({
                    url: "/Example/Orari/removeOrarioDipendente",
                    method: "POST",
                    data: {
                        idOrario: idOrario
                    },
                    success: function (response) {
                        //alert("Orario rimosso con successo!");
                        resolve(response);
                        // Ricarica la pagina
                        location.reload();
                    },
                    error: function () {
                        alert("Si è verificato un errore durante la rimozione dell'orario.");
                        reject();
                    }
                });
            });
        }

        // Funzione per controllare la dimensione del select
        function checkSelectSize(selectElement) {
            if (selectElement.options.length == 1) {
                // Se il select ha solo un'opzione, nascondi la freccetta del menu a tendina
                selectElement.style.backgroundImage = "none";

                // Aggiungi un gestore di eventi per il mousedown sull'opzione
                selectElement.addEventListener('mousedown', function (event) {
                    // Impedisci l'apertura del menu a tendina
                    event.preventDefault();
                    // Seleziona l'opzione senza aprire il menu a tendina
                    selectElement.selectedIndex = 0; // Indice dell'unica opzione
                    // Simula lo stile di evidenziazione solo se non è già selezionata
                    if (!selectElement.dataset.selected) {
                        selectElement.style.backgroundColor = "#0867d2"; // Cambia il colore di sfondo
                        selectElement.style.color = "#000"; // Cambia il colore del testo
                        selectElement.dataset.selected = true; // Imposta il dataset per indicare che è selezionato
                    }
                });

                // Aggiungi un gestore di eventi per il mouseup per ripristinare lo stile originale
                selectElement.addEventListener('mouseup', function (event) {
                    // Ripristina lo stile originale solo se non è già selezionata
                    if (!selectElement.dataset.selected) {
                        selectElement.style.backgroundColor = ""; // Ripristina il colore di sfondo
                        selectElement.style.color = ""; // Ripristina il colore del testo
                    }
                });

                // Aggiungi un gestore di eventi per il cambio opzione per mantenere lo stile evidenziato
                selectElement.addEventListener('change', function (event) {
                    if (selectElement.selectedIndex === 0) {
                        // Rimuovi lo stato di selezione e ripristina lo stile originale
                        selectElement.dataset.selected = false;
                        selectElement.style.backgroundColor = "";
                        selectElement.style.color = "";
                    } else {
                        // Imposta lo stato di selezione
                        selectElement.dataset.selected = true;
                    }
                });
            }
        }
    </script>*@
}